---
- hosts: localhost
  connection: local

  vars:
    transmission_container: transmission_vpn
    transmission_network: jewflix_dynamic_24
    transmission_port: 9091
    transmission_retention: 120

  tasks:
    - name: Generate temporary directory for python packages
      tags:
        - jfx_clean_td
      tempfile:
        prefix: 'docker.'
        state: directory
      register: _docker_tempfile

    - name: Ensure docker python packages are installed
      tags:
        - jfx_clean_td
      pip:
        name: docker
        state: present
        virtualenv: "{{ _docker_tempfile.path }}"

    - name: Retrieve facts about docker container
      tags:
        - jfx_clean_td
      docker_container_info:
        name: "{{ transmission_container }}"
      register: _transmission_container
      vars:
        ansible_python_interpreter: "{{ _docker_tempfile.path + '/bin/python' }}"

    - name: Ensure temporary directory is absent
      tags:
        - jfx_clean_td
      file:
        path: "{{ _docker_tempfile.path }}"
        state: absent

    - name: Debug `_transmission_container`
      tags:
        - jfx_clean_td
      debug:
        msg: "{{ _transmission_container }}"
        verbosity: 1

    - name: Generate transmission container and time facts
      tags:
        - jfx_clean_td
      set_fact:
        transmission_epoch: "{{ transmission_now|int - transmission_sec|int }}"
        transmission_host: "{{ _transmission_container.container.NetworkSettings.Networks[transmission_network].IPAddress }}"
      vars:
        transmission_now: "{{ ansible_date_time.epoch }}"
        transmission_sec: "{{ transmission_retention * 86400 }}"

    - name: Fetch session id from transmission
      tags:
        - jfx_clean_td
      uri:
        method: GET
        status_code: 409
        url: "{{ 'http://' + [transmission_host, transmission_port]|join(':') + '/transmission/rpc' }}"
      register: _transmission_get

    - name: Gather a list of torrents
      tags:
        - jfx_clean_td
      uri:
        body:
          arguments:
            fields: ['id', 'name', 'addedDate']
          method: torrent-get
        body_format: json
        headers:
          X-Transmission-Session-Id: "{{ _transmission_get.x_transmission_session_id }}"
        method: POST
        status_code: 200
        url: "{{ 'http://' + [transmission_host, transmission_port]|join(':') + '/transmission/rpc' }}"
      register: _transmission_torrent_get

    - name: Generate a list from torrent-get return values
      tags:
        - jfx_clean_td
      set_fact:
        transmission_list: "{{ transmission_list|default([]) + _transmission_list }}"
      loop: "{{ _transmission_torrent_get.json.arguments.torrents|json_query('[].{id: id, name: name,  addedDate: addedDate}') }}"
      loop_control:
        label: "{{ t.name }}"
        loop_var: t
      vars:
        _transmission_list:
          - id: "{{ t.id|int }}"
            name: "{{ t.name }}"
            addedDate: "{{ t.addedDate|int }}"

    - name: Delete torrents exceeding transmission retention policy
      tags:
        - jfx_clean_td
      uri:
        body:
          arguments:
            ids: '[ {{ torrent.id }} ]'
            delete-local-data: true
          method: torrent-remove
        body_format: json
        headers:
          X-Transmission-Session-Id: "{{ _transmission_get.x_transmission_session_id }}"
        method: POST
        return_content: true
        status_code: 200
        url: "{{ 'http://' + [transmission_host, transmission_port]|join(':') + '/transmission/rpc' }}"
      loop: "{{ transmission_list|default([]) }}"
      loop_control:
        label: "{{ torrent.name }}"
        loop_var: torrent
      when: torrent.addedDate < transmission_epoch
...
